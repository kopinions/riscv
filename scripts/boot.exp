#!/usr/bin/env expect
exp_internal -f debug.log 0;
set basedir [file normalize [file dirname $argv0]]
set imgroot [exec realpath "${basedir}/../images"]
set tlmbin [exec realpath "${basedir}/../build/apps/tlm/tlm.elf"]
set vncport [exec shuf -i 100-200 -n 1]
set real_vncport [expr {$vncport + 5900}]
puts [format "start vnc at port %d" $real_vncport]
set timeout -1

set accel [expr ([string equal [exec uname -s] "Linux"] ==1 )? "{kvm}" : "{hvf}"]
set kernel_release [exec uname -r]
if {[string equal [exec uname -s] "Linux"]} {
    set vnccmd "vinagre"
} else {
    set vnccmd "vncviewer -SecurityTypes=None"
}

file delete -force -- /tmp/sim
file mkdir /tmp/sim

spawn qemu-system-x86_64 \
    -name test \
    -M q35,kernel-irqchip=split \
    -m 8G \
    -smp 2 \
    -cpu host \
    -accel ${accel} \
    -no-user-config \
    -nodefaults \
    -boot order=c \
    -kernel ${imgroot}/vmlinuz-${kernel_release} \
    -append "root=/dev/mapper/centos-root ro crashkernel=auto rd.lvm.lv=centos/root rd.lvm.lv=centos/swap console=ttyS0 console=hvc0 edd=off LANG=en_US.UTF-8" \
    -initrd ${imgroot}/initramfs-${kernel_release}.img \
    -device intel-iommu,intremap=on,device-iotlb=on \
    -hda ${imgroot}/rootfs.img \
    -vga virtio \
    -vnc :${vncport} \
    -chardev file,id=file0,path=serial.log -serial chardev:file0 \
    -chardev stdio,id=monitor \
    -mon chardev=monitor \
    -net nic,model=rtl8139 -net user,hostfwd=tcp::2222-:22 \
    -device ioh3420,id=remoteport,slot=0 \
    -device ioh3420,id=remoteport1,slot=1 \
    -machine-path /tmp/sim \
    -device remote-port-pci-adaptor,bus=remoteport,id=rp0

# -vnc :${vncport},password=on \

set qemu_spawn_id $spawn_id

# if {[fork] == 0 } {
#     spawn ${tlmbin} unix:/tmp/sim/qemu-rport-_machine_peripheral_rp0_rp 10000
#     set tlm_spawn_id ${spawn_id}
#     expect -i ${tlm_spawn_id} {
#         "*" continue;
#         eof exit -i ${tlm_spawn_id}
#     }


#     # expect -i ${tlm_spawn_id} eof
#     # exit -i ${tlm_spawn_id}
# }


expect -i ${qemu_spawn_id} "*remote-port-pci-adaptor*ready\r" {
    send -i ${qemu_spawn_id} "\r"
}

expect -i ${qemu_spawn_id} "(qemu)" {
    send -i ${qemu_spawn_id} "info pci\r"
    # send -i ${qemu_spawn_id} -raw "device_add remote-port-pci-device,bus=remoteport,rp-adaptor0=rp,rp-chan0=0,vendor-id=0x16c3,device-id=0xabcd,revision=0x01,nr-io-bars=0,nr-mm-bars=1,bar-size0=0x4000,prog-if=0x0,ats=false,msix=true,irq-pin=1\r"

    send -i ${qemu_spawn_id} "\r\r"
    send -i ${qemu_spawn_id} -- "device_add remote-port-pci-device,bus=remoteport,rp-adaptor0=rp,rp-chan0=0,vendor-id=0x1af4,device-id=0x1100,revision=0x01,nr-io-bars=0,nr-mm-bars=1,bar-size0=0x4000,prog-if=0x0,ats=false,msix=true,irq-pin=1\r"
    send -i ${qemu_spawn_id} "\r\r"
    send -i ${qemu_spawn_id} -- "device_add remote-port-pci-device,bus=remoteport,rp-adaptor0=rp,rp-chan0=0,vendor-id=0x1af4,device-id=0x1100,revision=0x01,nr-io-bars=0,nr-mm-bars=1,bar-size0=0x1000,prog-if=0x01,ats=false,msix=true,irq-pin=1\r"
}


expect -i ${qemu_spawn_id} "(qemu)" {
    if {[fork] == 0 } {
        spawn -ignore HUP -noecho ${vnccmd} 127.0.0.1:$real_vncport
        set vnc_spawn_id ${spawn_id}
        exit 0
    }
}




# set prompt ".*\(qemu\)"
# interact -o -nobuffer -re $prompt return
# send "info\r"
# interact -o -nobuffer -re $prompt return
# send "system_powerdown\r"

# expect "(qemu)" {
#     send "system_powerdown\r"
# }
# set spawn_id ${qemu_spawn_id}

send -i ${qemu_spawn_id} "info pci\r"
send_user ${qemu_spawn_id}
expect -i ${qemu_spawn_id} eof


device_add remote-port-pci-device,bus=remoteport,rp-adaptor0=rp,rp-chan0=0,vendor-id=0x1af4,device-id=0x1100,revision=0x01,nr-io-bars=0,nr-mm-bars=1,bar-size0=0x1000,prog-if=0x01,ats=false,msix=true,irq-pin=1
